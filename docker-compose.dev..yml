services:
  mysql:
    image: "mysql:8.0"
    env_file:
      - ./envs/mysql.env
    volumes:
      - mysql_data:/var/lib/mysql

  php:
    build:
      context: .
      dockerfile: dockerfiles/php.dockerfile
    volumes:
      - ./src:/var/www/html

  server:
    build:
      context: .
      dockerfile: dockerfiles/nginx.dockerfile
    ports:
      - 8081:80
    volumes:
      - ./src:/var/www/html
      - ./nginx/nginx.dev.conf:/etc/nginx/conf.d/default.conf # use dev nginx conf file
    depends_on:
      - php
      - mysql

  vite:
    image: node:20
    working_dir: /var/www/html
    volumes:
      - ./src:/var/www/html
    ports:
      - "5173:5173" # <-- expose Vite's dev server port
    command: ["npm", "run", "dev"]

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
    stdin_open: true #makes the frontend run in "interective mode"
    tty: true #makes the frontend run in "interective mode"

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000" # S3-compatible API
      - "9001:9001" # MinIO Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data

  #Here in my entry point amongs other things i make minio public
  #so that i can fetch my image and video to expose to laravel view after being saved
  # mc:
  #   image: minio/mc
  #   depends_on:
  #     - minio
  #   entrypoint: /bin/sh -c "
  #     sleep 5 && \
  #     mc alias set local http://minio:9000 minioadmin minioadmin && \
  #     if ! mc ls local/portfolio > /dev/null 2>&1; then \
  #     mc mb local/portfolio && \
  #     mc anonymous set download local/portfolio; \
  #     fi"

  mc:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: |
      /bin/sh -c "
      echo 'Waiting for MinIO to be ready...' && \
      until mc alias set local http://minio:9000 minioadmin minioadmin; do sleep 2; done && \
      echo 'Creating portfolio bucket if missing...' && \
      (mc ls local/portfolio || mc mb local/portfolio) && \
      echo 'Setting bucket public (anonymous download)...' && \
      mc anonymous set download local/portfolio && \
      echo 'Done.'
      "

  # UTILITY CONTAINERS
  composer:
    build:
      context: ./dockerfiles
      dockerfile: composer.dockerfile
    volumes:
      - ./src:/var/www/html # we expose our souce code directory to this image througn binding
  artisan:
    build:
      context: .
      dockerfile: dockerfiles/php.dockerfile
    volumes:
      - ./src:/var/www/html
    entrypoint: ["php", "/var/www/html/artisan"]

  npm:
    image: node:20
    working_dir: /var/www/html
    volumes:
      - ./src:/var/www/html
    entrypoint: ["npm"] # <-- This line ensures it runs `npm` instead of Linux `install`

  npm-frontend:
    build:
      context: ./dockerfiles
      dockerfile: frontend.dockerfile
    stdin_open: true
    tty: true
    volumes:
      - ./frontend:/app

volumes:
  mysql_data:
  minio_data:
